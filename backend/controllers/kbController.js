import { v4 as uuidv4 } from 'uuid';
import KBModel from '../models/kbModel.js';

const kbModel = new KBModel();

const getKBAnswer = async (req, res) => {
    console.log('body received:', req.body);

    const { message, user_id, conversation_id } = req.body;

    if (!message || !user_id || !conversation_id) {
        return res.status(400).json({ error: "Missing required fields: message, user_id, or conversation_id" });
    }

    const sessionId = `${user_id}-${conversation_id}`;
    const question = message;

    const chatHistory = await kbModel.getChatHistory(sessionId);
    const messages = await chatHistory.getMessages();

    messages.push(kbModel.getHumanMessage(question));

    const modelResponse = await kbModel.invokeGraph(messages, sessionId);

    await chatHistory.addMessage(kbModel.getHumanMessage(question));
    await chatHistory.addMessage(modelResponse.messages[0]);

    const sourceDocuments = modelResponse.sourceDocuments ? modelResponse.sourceDocuments.map(doc => ({
        pageContent: doc.pageContent,
        metadata: doc.metadata.source
    })) : [];

    res.json({
        response: modelResponse.messages[0].content, // Main response with personality
        source_agent_response: modelResponse.messages[0].content, // Text generated by the specialized agent
        agent_workflow: [
            { "agent": "RouterAgent", "decision": "KnowledgeAgent" },
            { "agent": "KnowledgeAgent" }
        ],
        sourceDocuments: sourceDocuments
    });
};

export { getKBAnswer }; 